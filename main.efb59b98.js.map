{"version":3,"sources":["scripts/main.js"],"names":["gameField","score","gameRows","document","querySelectorAll","startBtn","querySelector","scoreElem","msgStart","msgWin","msgLoss","rowsCount","length","winCondition","updateUI","row","col","num","element","children","number","innerText","classList","value","add","remove","removeEventListener","gameHandler","resetGame","forEach","rowIndex","_","colIndex","setRandom","emptyFields","push","Math","trunc","random","randomNum","merge","reversed","filtered","reverse","filter","n","i","resRow","concat","Array","fill","sortRow","mappedRow","map","el","mergedRow","sortCol","currentRow","checkForLose","hasEmpty","some","arr","keyEvent","key","addEventListener"],"mappings":";AAAA,aAqKA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAnKA,IAUIA,EACAC,EAXEC,EAAWC,SAASC,iBAAiB,cACrCC,EAAWF,SAASG,cAAc,UAClCC,EAAYJ,SAASG,cAAc,eACnCE,EAAWL,SAASG,cAAc,kBAClCG,EAASN,SAASG,cAAc,gBAChCI,EAAUP,SAASG,cAAc,iBAEjCK,EAAYT,EAASU,OACrBC,EAAe,KAKfC,EAAW,SAACC,EAAKC,EAAKC,GACpBC,IAAAA,EAAUhB,EAASa,GAAKI,SAASH,GACjCI,EAASH,GAAOjB,EAAUe,GAAKC,GAErCE,EAAQG,UAAYD,EAAS,EAAIA,EAAS,GAC1CF,EAAQI,UAAUC,MAAQ,GAC1BL,EAAQI,UAAUE,IAAmBJ,eAAAA,OAAAA,GAAU,cAE3CA,IAAWP,IACbJ,EAAOa,UAAUG,OAAO,UACxBtB,SAASuB,oBAAoB,UAAWC,KAItCC,EAAY,WAChB5B,EAAY,CACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZC,EAAQ,EACRM,EAAUc,UAAY,EACtBb,EAASc,UAAUE,IAAI,UACvBf,EAAOa,UAAUE,IAAI,UACrBd,EAAQY,UAAUE,IAAI,UAEtBxB,EAAU6B,QAAQ,SAACd,EAAKe,GACtBf,EAAIc,QAAQ,SAACE,EAAGC,GAAalB,OAAAA,EAASgB,EAAUE,QAI9CC,EAAY,WAGX,IAFCC,IAAAA,EAAc,GAEXnB,EAAM,EAAGA,EAAMJ,EAAWI,IAC5B,IAAA,IAAIC,EAAM,EAAGA,EAAML,EAAWK,IACL,IAAxBhB,EAAUe,GAAKC,IACjBkB,EAAYC,KAAK,CAACpB,EAAKC,IAKzBkB,GAAAA,EAAYtB,OAAS,EAAG,CAEPsB,IAAAA,EAAAA,EAAAA,EAAYE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAYtB,SAF5C,GAEnBG,EAFmB,EAAA,GAEdC,EAFc,EAAA,GAGpBuB,EAAYH,KAAKE,UAAY,GAAM,EAAI,EAE7CtC,EAAUe,GAAKC,GAAOuB,EAEtBzB,EAASC,EAAKC,EAAKuB,KAIjBC,EAAQ,SAACzB,GAIR,IAJa0B,IAAAA,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAEzBC,GADaD,EAAW1B,EAAI4B,UAAY5B,GACpB6B,OAAO,SAAAC,GAAKA,OAAM,IAANA,IAE3BC,EAAI,EAAGA,EAAIJ,EAAS9B,OAAS,EAAGkC,IACnCJ,EAASI,KAAOJ,EAASI,EAAI,KAC/BJ,EAASI,IAAM,EACfJ,EAASI,EAAI,GAAK,EAClB7C,GAASyC,EAASI,IAItBJ,EAAWA,EAASE,OAAO,SAAAC,GAAKA,OAAM,IAANA,IAChCtC,EAAUc,UAAYpB,EAEhB8C,IAAAA,EAASL,EAASM,OAAOC,MAAMtC,EAAY+B,EAAS9B,QAAQsC,KAAK,IAEhET,OAAAA,EAAWM,EAAOJ,UAAYI,GAGjCI,EAAU,WACT,IADUV,IAAAA,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACjBzB,EAAAA,SAAAA,GAIF,IAHCoC,IAAAA,EAAYpD,EAAUqD,IAAI,SAAAC,GAAMA,OAAAA,EAAGtC,KACnCuC,EAAYf,EAAMY,EAAWX,GAE1B1B,EAAM,EAAGA,EAAMJ,EAAWI,IACjCf,EAAUe,GAAKC,GAAOuC,EAAUxC,GAEhCD,EAASC,EAAKC,IAPTA,EAAM,EAAGA,EAAML,EAAWK,IAA1BA,EAAAA,GAWTiB,KAGIuB,EAAU,WACT,IADUf,IAAAA,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACjB1B,EAAM,EAAGA,EAAMJ,EAAWI,IAAO,CAClC0C,IAAAA,EAAazD,EAAUe,GACvBwC,EAAYf,EAAMiB,EAAYhB,GAEpCzC,EAAUe,GAAOwC,EAEZ,IAAA,IAAIvC,EAAM,EAAGA,EAAML,EAAWK,IACjCF,EAASC,EAAKC,GAIlBiB,KAGIyB,EAAe,WAGfC,IAFa3D,EAAU4D,KAAK,SAAAC,GAAOA,OAAAA,EAAID,KAAK,SAAAN,GAAMA,OAAO,IAAPA,MAElDK,CAIC,IAAA,IAAI5C,EAAM,EAAGA,EAAMJ,EAAWI,IAC5B,IAAA,IAAIC,EAAM,EAAGA,EAAML,EAAY,EAAGK,IACjChB,GAAAA,EAAUe,GAAKC,KAAShB,EAAUe,GAAKC,EAAM,IAC5ChB,EAAUgB,GAAKD,KAASf,EAAUgB,EAAM,GAAGD,GAC9C,OAKNL,EAAQY,UAAUG,OAAO,UACzBtB,SAASuB,oBAAoB,UAAWC,KAGpCA,EAAc,SAACmC,GACXA,OAAAA,EAASC,KACV,IAAA,UACHZ,IACA,MAEG,IAAA,YACHA,GAAQ,GACR,MAEG,IAAA,YACHK,IACA,MAEG,IAAA,aACHA,GAAQ,GAOZE,KAGFrD,EAAS2D,iBAAiB,QAAS,WACjC3D,EAASgB,UAAY,QACrBhB,EAASiB,UAAUG,OAAO,SAC1BpB,EAASiB,UAAUE,IAAI,WACvBI,IACAK,IACAA,IAEA9B,SAAS6D,iBAAiB,UAAWrC","file":"main.efb59b98.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameRows = document.querySelectorAll('.field-row');\nconst startBtn = document.querySelector('.start');\nconst scoreElem = document.querySelector('.game-score');\nconst msgStart = document.querySelector('.message-start');\nconst msgWin = document.querySelector('.message-win');\nconst msgLoss = document.querySelector('.message-lose');\n\nconst rowsCount = gameRows.length;\nconst winCondition = 2048;\n\nlet gameField;\nlet score;\n\nconst updateUI = (row, col, num) => {\n  const element = gameRows[row].children[col];\n  const number = num || gameField[row][col];\n\n  element.innerText = number > 0 ? number : '';\n  element.classList.value = '';\n  element.classList.add(`field-cell--${number}`, 'field-cell');\n\n  if (number === winCondition) {\n    msgWin.classList.remove('hidden');\n    document.removeEventListener('keydown', gameHandler);\n  }\n};\n\nconst resetGame = () => {\n  gameField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  scoreElem.innerText = 0;\n  msgStart.classList.add('hidden');\n  msgWin.classList.add('hidden');\n  msgLoss.classList.add('hidden');\n\n  gameField.forEach((row, rowIndex) => {\n    row.forEach((_, colIndex) => updateUI(rowIndex, colIndex));\n  });\n};\n\nconst setRandom = () => {\n  const emptyFields = [];\n\n  for (let row = 0; row < rowsCount; row++) {\n    for (let col = 0; col < rowsCount; col++) {\n      if (gameField[row][col] === 0) {\n        emptyFields.push([row, col]);\n      }\n    }\n  }\n\n  if (emptyFields.length > 0) {\n    // eslint-disable-next-line\n    const [row, col] = emptyFields[Math.trunc(Math.random() * emptyFields.length)];\n    const randomNum = Math.random() <= 0.1 ? 4 : 2;\n\n    gameField[row][col] = randomNum;\n\n    updateUI(row, col, randomNum);\n  }\n};\n\nconst merge = (row, reversed = false) => {\n  const prepared = reversed ? row.reverse() : row;\n  let filtered = prepared.filter(n => n !== 0);\n\n  for (let i = 0; i < filtered.length - 1; i++) {\n    if (filtered[i] === filtered[i + 1]) {\n      filtered[i] *= 2;\n      filtered[i + 1] = 0;\n      score += filtered[i];\n    }\n  }\n\n  filtered = filtered.filter(n => n !== 0);\n  scoreElem.innerText = score;\n\n  const resRow = filtered.concat(Array(rowsCount - filtered.length).fill(0));\n\n  return reversed ? resRow.reverse() : resRow;\n};\n\nconst sortRow = (reversed = false) => {\n  for (let col = 0; col < rowsCount; col++) {\n    const mappedRow = gameField.map(el => el[col]);\n    const mergedRow = merge(mappedRow, reversed);\n\n    for (let row = 0; row < rowsCount; row++) {\n      gameField[row][col] = mergedRow[row];\n\n      updateUI(row, col);\n    }\n  }\n\n  setRandom();\n};\n\nconst sortCol = (reversed = false) => {\n  for (let row = 0; row < rowsCount; row++) {\n    const currentRow = gameField[row];\n    const mergedRow = merge(currentRow, reversed);\n\n    gameField[row] = mergedRow;\n\n    for (let col = 0; col < rowsCount; col++) {\n      updateUI(row, col);\n    }\n  }\n\n  setRandom();\n};\n\nconst checkForLose = () => {\n  const hasEmpty = gameField.some(arr => arr.some(el => el === 0));\n\n  if (hasEmpty) {\n    return;\n  }\n\n  for (let row = 0; row < rowsCount; row++) {\n    for (let col = 0; col < rowsCount - 1; col++) {\n      if (gameField[row][col] === gameField[row][col + 1]\n        || gameField[col][row] === gameField[col + 1][row]) {\n        return;\n      }\n    }\n  }\n\n  msgLoss.classList.remove('hidden');\n  document.removeEventListener('keydown', gameHandler);\n};\n\nconst gameHandler = (keyEvent) => {\n  switch (keyEvent.key) {\n    case 'ArrowUp':\n      sortRow();\n      break;\n\n    case 'ArrowDown':\n      sortRow(true);\n      break;\n\n    case 'ArrowLeft':\n      sortCol();\n      break;\n\n    case 'ArrowRight':\n      sortCol(true);\n      break;\n\n    default:\n      break;\n  }\n\n  checkForLose();\n};\n\nstartBtn.addEventListener('click', () => {\n  startBtn.innerText = 'Reset';\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n  resetGame();\n  setRandom();\n  setRandom();\n\n  document.addEventListener('keydown', gameHandler);\n});\n"]}